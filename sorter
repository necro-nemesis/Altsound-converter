#!/bin/bash

###############################################################
####  Transfer and associate .wav files with Altsound.csv  ####
############################## by necro_nemesis ###############

#if dialog is not install prompt to install it

REQUIRED_PKG="dialog"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
echo Checking for $REQUIRED_PKG: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
  sudo apt-get --yes install $REQUIRED_PKG
fi

#Open dialog and prompt for input

HEIGHT=15
WIDTH=40
CHOICE_HEIGHT=4
BACKTITLE="Pinball to Altsound Converter"
TITLE="Folder to parse"
MENU="Choose one of the following options:"

OPTIONS=(music "Parse music folder"
         jingle "Parse jingle folder"
	 sfx "Parse sound effects folder"
	 single "Parse single folder"
         voice "Parse voice folder"
	 Quit "Exit program")

CHOICE=$(dialog --no-cancel \
		--clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
		$HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

case $CHOICE in
        "music")
            echo "parsing music"
           ;;
        "jingle")
            echo "parsing jingle"
            ;;
        "sfx")
            echo "parsing sfx"
            ;;
        "single")
            echo "parsing single"
            ;;
        "voice")
            echo "parsing voice"
            ;;
        "Quit")
            ;;

esac

HEIGHT=15
WIDTH=40
CHOICE_HEIGHT=4
BACKTITLE="Pinball to Altsound Converter"
TITLE="Sound file type"
MENU="Choose one of the following options:"

OPTIONS=(ogg "Parse for ogg matches"
	 wav "Parse for wav matches"
         Quit "Exit program")

CHOICE2=$(dialog --no-cancel \
                --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

case $CHOICE2 in
        "ogg")
            echo "parsing ogg"
           ;;
        "wav")
            echo "parsing wav"
           ;;
        "Quit")
            ;;

esac



echo $CHOICE
clear

#Exit if choice is to quit

if [[ $CHOICE == "Quit" || $CHOICE2 == "Quit" ]]
	then
	clear
	exit
fi

# Set variables for parse

FOLDER="${CHOICE}"
TYPE="${CHOICE2}"
INPUT=altsound.csv
OLDIFS=$IFS
IFS=','
mkdir tmp_$FOLDER

#Parse files matching folder names to csv file names

[ ! -f $INPUT ] && { echo "$INPUT file not found"; exit 99; }
while read ID CHANNEL DUCK GAIN LOOP STOP NAME FNAME
do
        holder="$(echo "$FNAME" | sed -n 's/[^-]*-//p')"
	filename="$(echo "$holder" | sed 's/\.[^.]*$//')"
	writename="$(echo "$FNAME"  | tr -d '"')"
	filewrite="$(echo "$writename" | sed "s/^[ \t]*//")"
find  ./$FOLDER -type d -mindepth 1 -maxdepth 1 | while read folder; do
	foldername="$(echo "$folder" | sed -n 's/[^-]*-//p')"
   if [[ $filename == $foldername ]] ;
	then
for file in ./$folder/*

#On match write file to new "tmp_*" using csv matched name

do
   if [[ $file == *.$CHOICE2 ]]
	then
    	newfile="$(echo "$file" | sed 's|.*/||')"
	filewrite="$(echo "$filewrite" | sed "s/\."$CHOICE2".*/."$CHOICE2"/")"
	cp $file ./tmp_$FOLDER/"$filewrite"
        echo "folder_match :  $foldername"
        echo "file_match :    $filename"
        echo "folder_name :   $folder"
	echo "original_name : $file"
	echo "newfile :       $newfile"
	echo "csv_name  :     $filewrite"
   fi
done

   fi

	done
done < $INPUT

IFS=$OLDIFS

#List newly generated consolodated files

echo -e "\e[42m  ###########################   \e[0m"
echo -e "\e[42m  ###   FILES GENERATED   ###   \e[0m"
echo -e "\e[42m  ###########################   \e[0m"
ls -la tmp_$FOLDER
