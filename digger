#!/bin/bash

###############################################################
####  Transfer and associate .wav files with Altsound.csv  ####
############################## by necro_nemesis ###############
## Digger v1.1 ##

# Sound file Parser function

parser ()
{
HEIGHT=15
WIDTH=40
CHOICE_HEIGHT=3
BACKTITLE="Pinball Sound Folders to Altsound Converter"
TITLE="Sound file type"
MENU="Choose one of the following options:"

OPTIONS=(ogg "Parse for ogg matches"
	 wav "Parse for wav matches"
         Quit "Exit program")

CHOICE2=$(dialog --no-cancel \
                --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

case $CHOICE2 in

        "ogg")
            echo "parsing ogg"
           ;;

        "wav")
            echo "parsing wav"
           ;;

        "Quit")
		echo "Altsound folder contents"
		ls -la Altsound
		clear
		exit
            ;;

esac

clear

# test if altsound and/or file exists otherwise create a new ones and populate definitions

if [ ! -d Altsound ]; then
   mkdir -p Altsound;
fi

if [ ! -f Altsound/altsound.csv ]
then
   touch Altsound/altsound.csv
   echo \"ID\",\"CHANNEL\",\"DUCK\",\"GAIN\",\"LOOP\",\"STOP\",\"NAME\",\"FNAME\",\"GROUP\",\"SHAKER\",\"SERIAL\".\"PRELOAD\",\"STOPCMD\" >> Altsound/altsound.csv
fi


# Set variables for parse

TYPE="${CHOICE2}"
INPUT=altsound.csv
OLDIFS=$IFS
IFS=','

# Create folders

if [ ! -d tmp_"$(echo "$1")" ]; then
  mkdir -p tmp_"$(echo "$1")";
fi

# Parse files matching folder names to csv file names

[ ! -f $INPUT ] && { echo "$INPUT file not found"; exit 99; }
while read ID CHANNEL DUCK GAIN LOOP STOP NAME FNAME GROUP SHAKER SERIAL PRELOAD STOPCMD
do
	filename="$(echo "$FNAME" | sed -n 's/[^-]*-//p' | sed 's/\.[^.]*$//')"
find ./$1 -type d -mindepth 1 -maxdepth 1 -name "$(echo *"$filename")" | while read folder; do
for file in ./$folder/*

# On match write file to new "tmp_*" using csv matched name

do
   if [[ $file == *.$CHOICE2 ]]
	then
	fname="$(echo "$file" | sed 's|.*/||' | sed -e 's/[^A-Za-z0-9._-]/_/g' | sed 's/\.[^.]*$//')"
	indexedfile="$(echo "$file" | sed 's|.*/||' | sed -e 's/[^A-Za-z0-9._-]/_/g' | sed -e "s/^/"$(echo "$ID" | tr -d '"')"-/")"
        cp "$(echo "$file")" "$(echo ./tmp_"$1"/"$indexedfile")"

# Generate altsound.cvs enties for file
#              ID   CHANNEL     DUCK    GAIN    LOOP    STOP        NAME              FNAME          GROUP     SHAKER   SERIAL    PRELOAD    STOPCMD
	echo "$ID","$CHANNEL","$DUCK","$GAIN","$LOOP","$STOP", \"""$fname\""", \"""$indexedfile\""","$GROUP","$SHAKER","$SERIAL","$PRELOAD","$STOPCMD" >> Altsound/altsound.csv
        echo "file_match :    $filename"
        echo "folder_name :   $folder"
        echo "original_name : $file"
	echo "fname:          $fname"
        echo "csv_name  :     $indexedfile"

   fi
done
	done
done < $INPUT

IFS=$OLDIFS

# List newly generated consolodated files

rsync -a "$(echo tmp_"$1")"/ Altsound
echo -e "\e[42m  ###########################   \e[0m"
echo -e "\e[42m  ###   FILES GENERATED   ###   \e[0m"
echo -e "\e[42m  ###########################   \e[0m"
ls -la tmp_"$(echo "$1")"

read -p "Press any key to continue... " -n1 -s

./$(basename $0) && exit
}

# end of Parser function

# zip compression function

compress_folder ()
	{
	profilename=$(\
	dialog --title "Create Profile" \
	--inputbox "Enter new profile name:" 8 40 \
	3>&1 1>&2 2>&3 3>&- \
	)
	exitStatus=$?
	if [[ $exitStatus != 1 ]]
		then
		mkdir $profilename
		folder="Altsound"
		cp -R Altsound/* $profilename
		(zip -qr - $profilename | pv -n -s $(du -sb $profilename | awk '{print $1}') > $profilename.zip) 2>&1 | dialog --gauge "Writing sound profile to "$profilename".zip" 7 70
		mv $profilename $profilename.bak
	fi
	./$(basename $0) && exit
	}

# Dependency checker/installer
# if dependencies are not installed prompt to install them

package=( "dialog" "ffmpeg" "pv" )

for i in "${package[@]}"
do

REQUIRED_PKG="$i"
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG|grep "install ok installed")
echo Checking for $REQUIRED_PKG: $PKG_OK
if [ "" = "$PKG_OK" ]; then
  echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
  sudo apt-get --yes install $REQUIRED_PKG
fi

done

# Main dialog/prompt for input

HEIGHT=18
WIDTH=65
CHOICE_HEIGHT=11
BACKTITLE="Pinball Sound Folders to Altsound Converter"
TITLE="Folder to parse"
MENU="Choose one of the following options:"

OPTIONS=(music "Parse music folder"
         jingle "Parse jingle folder"
	 sfx "Parse sound effects folder"
	 single "Parse single folder"
         voice "Parse voice folder"
	 duplicates "List duplicate source csv references"
	 sort "Sort and clean csv"
	 convert "Convert parsed Altsound folder .ogg to .wav"
	 compress "Compress Altsound folder to zip"
	 choose_convert "Choose a folder to convert .ogg to .wav"
	 Quit "Exit program")

CHOICE=$(dialog --no-cancel \
		--clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
		$HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

case $CHOICE in

        "music")
		parser "$CHOICE"
           ;;

        "jingle")
		parser "$CHOICE"
            ;;

        "sfx")
		parser "$CHOICE"
            ;;

        "single")
		parser "$CHOICE"
            ;;

        "voice")
		parser "$CHOICE"
            ;;

	"duplicates")
		clear
		dialog --title 'Duplicate Entry Information' --msgbox \
"Duplicate entries in the altsound.cvs source file my be intentional or unintentional which can lead to deriable or underdesirable results respectively. When intentionally used and desireable
it is to provide randomly selected sounds for a the same event. In these instances the sounds will be relevent to the event. In some situations though it may be that a sound is named identically
for two distinct events. For example a \"Jackpot\" named voice call may also be named \"Jackpot\" for the music file played with the Jackpot event. The ambuguity of duplicate names in this
undesired instance is rare but can be resolved by listening to the playback of the sound samples and manually changing the sound file name and cvs entry to be exclusive thereby specifically
referencing the desired sound file. The following is a list of files that should be reviewed to see if they are desireable or undesireable duplicates. This makes no changes to any of the entries
of files just lists potential issues \n\nIn general undesireable duplicates will be evident when duplicate names are found in two separate areas of the source cvs files i.e. not adjacent addresses, as opposed to being
grouped together where they are used for randomization intentionally. A duplicate report will be writtent to a duplicate_report.txt file to help assist identifying these instances." 20 100
		awk -F, '!a[$7]++{next} {print "Line " NR " " $7 " is duplicated"}' altsound.csv | more | dialog --title "Duplicate Source altsound.cvs Names" "$@" --programbox 60 70
		awk -F, 'NR==FNR{a[$7]++; next} a[$7]>1' altsound.csv altsound.csv > duplicate_report.txt
		sed -i '1s/^/   DUPLICATE ENTRY REPORT\n \
		   Use your file search to search for all folder \
		   entries that have the same column 7 name. \
		   Playback the sounds and identify the desired \
		   sound then alter the file name to be unique, \
		   copy it to the Altsound folder and edit the associated entry \
		   in column 8 of altsound.csv to the new file name\n\n/' duplicate_report.txt
		dialog --title 'Duplicate Entry Report' --msgbox \
"A duplicate entry report \"duplicate_report.txt\" has been generated." 7 50
		./$(basename $0) && exit
	    ;;


	"sort")
		clear
		cd Altsound
		sed -i '/STOPCMD/d' altsound.csv  # remove all header entries
		sort -k1 -n -t, altsound.csv > newsound.csv  # sort by first column acending
		sort --field-separator='"' --key=4 -n newsound.csv > altsound.csv
		sed -i 1i"\"ID\",\"CHANNEL\",\"DUCK\",\"GAIN\",\"LOOP\",\"STOP\",\"NAME\",\"FNAME\",\"GROUP\",\"SHAKER\",\"SERIAL\".\"PRELOAD\",\"STOPCMD\"" altsound.csv  # replace headers
		rm newsound.csv  # remove temp file
		cd ..
		./$(basename $0) && exit
	    ;;

	"convert")
                clear
                cd Altsound
                for i in *.ogg; do ffmpeg -i "$i" "${i%.*}.wav" -y; done
                find -type f -name '*.ogg' -exec rm {} +
                sed -i 's/.ogg/.wav/g' altsound.csv
                echo "Altsound folder contents"
                ls -la
                cd ..
                read -p "Press any key to continue... " -n1 -s
                ./$(basename $0) && exit
            ;;

	"compress")
		clear
		compress_folder
		./$(basename $0) && exit
	    ;;

	"choose_convert")
		clear
		TARGET=$(dialog --stdout --title "Arrows move cursor / spacebar to select" --dselect ~/ 14 48)
		exitStatus=$?
		if [[ $exitStatus != 1 ]]
		then
		cwd=$(pwd)
		cd "$TARGET"
		for i in *.ogg; do ffmpeg -i "$i" "${i%.*}.wav" -y; done
		find -type f -name '*.ogg' -exec rm {} +
		sed -i 's/.ogg/.wav/g' altsound.csv
		echo "Converted folder contents"
		ls -la
		cd "$cwd"
		read -p "Press any key to continue... " -n1 -s
		./$(basename $0) && exit
		fi
		./$(basename $0) && exit
	    ;;

        "Quit")
		clear
		echo "Altsound folder contents"
		ls -la Altsound
		exit
            ;;

esac
